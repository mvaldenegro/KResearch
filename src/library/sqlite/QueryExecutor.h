/*
 * Copyright (C) 2011-2012 Matias Valdenegro <matias.valdenegro@gmail.com>
 * This file is part of KResearch.
 *
 * kesearch is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * kresearch is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KResearch.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef QUERYEXECUTOR_H_
#define QUERYEXECUTOR_H_

#include <library/sqlite/Transaction.h>

#include <QMap>
#include <QVariant>
#include <QStringList>
#include <QSqlQuery>
#include <QSqlDatabase>


typedef QMap<QString, QVariant> QueryParameters;

inline QueryParameters makeQueryParameters(QString name, QVariant value)
{
    QueryParameters ret;
    ret[name] = value;

    return ret;
}

/*! List of Identifiers (qulonglong).
 */
typedef QList<qulonglong> IDList;

/*! Class to execute queries based on table and column information.
 * This class will take table and column names and construct and executes queries on them.
 * It was made to make easier data access in this application, and to support transactions.
 */

class QueryExecutor
{
    public:
        QueryExecutor(QSqlDatabase database = QSqlDatabase::database());
        virtual ~QueryExecutor();

        /*! Inserts data into a table.
         */

        bool insert(const QString& tableName, const QueryParameters& params);

        /*! Updates data in a table.
         *
         */

        bool update(const QString& tableName, const QueryParameters& constraints, const QueryParameters& values);

        /*! Queries data from a table.
         */

        QSqlQuery select(const QString& tableName, const QStringList columns = QStringList(),
                         const QueryParameters& constraints = QueryParameters());

        /*! Removes data from a table.
         */

        bool remove(const QString& tableName, const QueryParameters& params);

        /*! Executes a custom query.
         */

        QSqlQuery customQuery(const QString& rawQuery, const QueryParameters& params = QueryParameters());

        /*! Queries the value of a table column, subject to constraints.
         */

        QVariant columnValue(const QString& tableName, const QString& column, const QueryParameters& constraints);

        /*! Returns the ID generated by the last insert operation.
         */

        qulonglong lastInsertID();

        /*! Queries and returns the IDs in a one-to-many relation.
         * This will assume the intermediate table is called @oneTableName_@manyTableName, the column in the first table
         * is called @oneTableNameId and the column in the intermediate table is called @manyTableNameId.
         * @id is the ID from @oneTableName that will be queried in the intermediate table.
         */

        IDList queryOneToManyRelation(const QString& oneTableName, const QString& manyTableName, qulonglong id);

        inline QSqlDatabase database() const
        {
            return mDatabase;
        }

    private:
        bool executeQuery(const QString& queryString, const QueryParameters& params, QSqlQuery *ret = nullptr);

    private:
        //Transaction mTransaction;
        QSqlDatabase mDatabase;
};

#endif /* QUERYEXECUTOR_H_ */
